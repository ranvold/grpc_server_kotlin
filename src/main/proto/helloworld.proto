// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

// Options for Java code generation
option java_multiple_files = true;
option java_package = "org.example";
option java_outer_classname = "RemoteDBProto";
option objc_class_prefix = "RDB";

package org.example;

service RemoteDB {
  rpc GetRows(GetRowsRequest) returns (GetRowsResponse);
  rpc GetColumns(GetColumnsRequest) returns (GetColumnsResponse);
  rpc GetTablesData(GetTablesDataRequest) returns (GetTablesDataResponse);
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);
  rpc AddRow(AddRowRequest) returns (AddRowResponse);
  rpc AddColumn(AddColumnRequest) returns (AddColumnResponse);
  rpc DeleteTable(DeleteTableRequest) returns (DeleteTableResponse);
  rpc DeleteColumn(DeleteColumnRequest) returns (DeleteColumnResponse);
  rpc DeleteRow(DeleteRowRequest) returns (DeleteRowResponse);
  rpc EditCell(EditCellRequest) returns (EditCellResponse);
  rpc CreateTestTable(CreateTestTableRequest) returns (CreateTestTableResponse);
  rpc TablesIntersection(TablesIntersectionRequest) returns (TablesIntersectionResponse);
}

// Request and Response messages for each service method
message GetRowsRequest {
  int32 tableIndex = 1;
}

message GetRowsResponse {
  repeated Row rows = 1;
}

message GetColumnsRequest {
  int32 tableIndex = 1;
}

message GetColumnsResponse {
  repeated Column columns = 1;
}

message GetTablesDataRequest {}

message GetTablesDataResponse {
  repeated TableData tablesData = 1;
}

message CreateTableRequest {
  string name = 1;
}

message CreateTableResponse {
  bool success = 1;
}

message AddRowRequest {
  int32 tableIndex = 1;
}

message AddRowResponse {
  bool success = 1;
}

message AddColumnRequest {
  int32 tableIndex = 1;
  string name = 2;
  ColumnType columnType = 3;
  string min = 4;
  string max = 5;
}

message AddColumnResponse {
  bool success = 1;
}

// Enum for ColumnType
enum ColumnType {
  INT = 0;
  CHAR = 1;
  REAL = 2;
  STRING = 3;
  COLOR = 4;
  COLORINVL = 5;
}

message Row {
  repeated string values = 1; // As per your Row class
}

// Define the structure of a Column.
message Column {
  string name = 1;
  ColumnType type = 2;
  string min = 3; // Optional field for minimum value, relevant for TIMEINVL
  string max = 4; // Optional field for maximum value, relevant for TIMEINVL
  // Include other fields as necessary
}

// TableData structure as per your Java class.
message TableData {
  string name = 1;
  int32 index = 2; // Use 'id' in your Java class, but 'index' in the proto might be more suitable
}

// Complete implementations for other request and response messages
message DeleteTableRequest {
  int32 tableIndex = 1;
}

message DeleteTableResponse {
  bool success = 1;
}

message DeleteColumnRequest {
  int32 tableIndex = 1;
  int32 columnIndex = 2;
}

message DeleteColumnResponse {
  bool success = 1;
}

message DeleteRowRequest {
  int32 tableIndex = 1;
  int32 rowIndex = 2;
}

message DeleteRowResponse {
  bool success = 1;
}

message EditCellRequest {
  int32 tableIndex = 1;
  int32 rowIndex = 2;
  int32 columnIndex = 3;
  string value = 4;
}

message EditCellResponse {
  bool success = 1;
}

message CreateTestTableRequest {}

message CreateTestTableResponse {
  bool success = 1;
}

message TablesIntersectionRequest {
  int32 tableIndex1 = 1;
  int32 tableIndex2 = 2;
}

message TablesIntersectionResponse {
  bool success = 1;
}

